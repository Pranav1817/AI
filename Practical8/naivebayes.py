# -*- coding: utf-8 -*-
"""NaiveBayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H2vOfi6RZUvxjBV-Cfh4x9N_f4Bh7Lc7
"""

# Import the necessary libraries
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load and preprocess your text data (replace 'data' with your dataset)
# For example, 'data' can be a list of text documents and 'labels' can be the corresponding labels.
data = ["This is a positive text.", "Negative sentiment in this one.", "Another positive example.", "Negative review."]
labels = [1, 0, 1, 0]

# Create vector representations using Count Vectorization
count_vectorizer = CountVectorizer()
X_count = count_vectorizer.fit_transform(data)

# Alternatively, create vector representations using TF-IDF Vectorization
tfidf_vectorizer = TfidfVectorizer()
X_tfidf = tfidf_vectorizer.fit_transform(data)

# Split the data into training and testing sets
X_train_count, X_test_count, y_train, y_test = train_test_split(X_count, labels, test_size=0.2, random_state=42)
X_train_tfidf, X_test_tfidf, y_train, y_test = train_test_split(X_tfidf, labels, test_size=0.2, random_state=42)

# Train Naive Bayes classifier on the Count Vectorized data
nb_count = MultinomialNB()
nb_count.fit(X_train_count, y_train)

# Train Naive Bayes classifier on the TF-IDF Vectorized data
nb_tfidf = MultinomialNB()
nb_tfidf.fit(X_train_tfidf, y_train)

# Make predictions and evaluate using Count Vectorization
y_pred_count = nb_count.predict(X_test_count)
accuracy_count = accuracy_score(y_test, y_pred_count)
print("Accuracy (Count Vectorization): {:.2f}%".format(accuracy_count * 100))

# Make predictions and evaluate using TF-IDF Vectorization
y_pred_tfidf = nb_tfidf.predict(X_test_tfidf)
accuracy_tfidf = accuracy_score(y_test, y_pred_tfidf)
print("Accuracy (TF-IDF Vectorization): {:.2f}%".format(accuracy_tfidf * 100))